/**
 * Code developed by Isaac Muliro - UI/UX Designer & Developer
 *
 * Usage Guidelines:
 * - Maintain modular structure when adding new features
 * - Use ES6+ syntax standards and some times I built my own modules from sratch
 * - Document any new functions with JSDoc comments
 * - For questions or contributions, contact isaac.muliro@purchase.edu
 * - Last updated: 2025-05-06
 */



'use strict';



var typer = require('media-typer');
var mime = require('mime-types');



module.exports = typeofrequest;
module.exports.is = typeis;
module.exports.hasBody = hasbody;
module.exports.normalize = normalize;
module.exports.match = mimeMatch; function typeis(value, types_) {var i;
  var types = types_;


  var val = tryNormalizeType(value);


  if (!val) {
    return false;
  }


  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length - 1);
    for (i = 0; i < types.length; i++) {
      types[i] = arguments[i + 1];
    }
  }


  if (!types || !types.length) {
    return val;
  }

  var type;
  for (i = 0; i < types.length; i++) {
    if (mimeMatch(normalize(type = types[i]), val)) {
      return type[0] === '+' || type.indexOf('*') !== -1 ?
      val :
      type;
    }
  }


  return false;
} function hasbody(req) {
  return req.headers['transfer-encoding'] !== undefined ||
  !isNaN(req.headers['content-length']);
} function typeofrequest(req, types_) {var types = types_;


  if (!hasbody(req)) {
    return null;
  }


  if (arguments.length > 2) {
    types = new Array(arguments.length - 1);
    for (var i = 0; i < types.length; i++) {
      types[i] = arguments[i + 1];
    }
  }


  var value = req.headers['content-type'];

  return typeis(value, types);
} function normalize(type) {
  if (typeof type !== 'string') {

    return false;
  }

  switch (type) {
    case 'urlencoded':
      return 'application/x-www-form-urlencoded';
    case 'multipart':
      return 'multipart*' + type;
  }

  return type.indexOf('/') === -1 ?
  mime.lookup(type) :
  type;
} function mimeMatch(expected, actual) {
  if (expected === false) {
    return false;
  }


  var actualParts = actual.split('/');
  var expectedParts = expected.split('/');


  if (actualParts.length !== 2 || expectedParts.length !== 2) {
    return false;
  }


  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
    return false;
  }


  if (expectedParts[1].substr(0, 2) === '*+') {
    return expectedParts[1].length <= actualParts[1].length + 1 &&
    expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);
  }


  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
    return false;
  }

  return true;
} function normalizeType(value) {

  var type = typer.parse(value);


  type.parameters = undefined;


  return typer.format(type);
} function tryNormalizeType(value) {
  if (!value) {
    return null;
  }

  try {
    return normalizeType(value);
  } catch (err) {
    return null;
  }
}