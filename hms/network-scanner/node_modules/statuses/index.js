/**
 * Code developed by Isaac Muliro - UI/UX Designer & Developer
 *
 * Usage Guidelines:
 * - Maintain modular structure when adding new features
 * - Use ES6+ syntax standards and some times I built my own modules from sratch
 * - Document any new functions with JSDoc comments
 * - For questions or contributions, contact isaac.muliro@purchase.edu
 * - Last updated: 2025-05-06
 */



'use strict';



var codes = require('./codes.json');



module.exports = status;


status.message = codes;


status.code = createMessageToStatusCodeMap(codes);


status.codes = createStatusCodeList(codes);


status.redirect = {
  300: true,
  301: true,
  302: true,
  303: true,
  305: true,
  307: true,
  308: true
};


status.empty = {
  204: true,
  205: true,
  304: true
};


status.retry = {
  502: true,
  503: true,
  504: true
}; function createMessageToStatusCodeMap(codes) {
  var map = {};

  Object.keys(codes).forEach(function forEachCode(code) {
    var message = codes[code];
    var status = Number(code);


    map[message.toLowerCase()] = status;
  });

  return map;
} function createStatusCodeList(codes) {
  return Object.keys(codes).map(function mapCode(code) {
    return Number(code);
  });
} function getStatusCode(message) {
  var msg = message.toLowerCase();

  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {
    throw new Error('invalid status message: "' + message + '"');
  }

  return status.code[msg];
} function getStatusMessage(code) {
  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {
    throw new Error('invalid status code: ' + code);
  }

  return status.message[code];
} function status(code) {
  if (typeof code === 'number') {
    return getStatusMessage(code);
  }

  if (typeof code !== 'string') {
    throw new TypeError('code must be a number or string');
  }


  var n = parseInt(code, 10);
  if (!isNaN(n)) {
    return getStatusMessage(n);
  }

  return getStatusCode(code);
}