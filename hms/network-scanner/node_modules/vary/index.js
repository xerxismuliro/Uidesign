/**
 * Code developed by Isaac Muliro - UI/UX Designer & Developer
 *
 * Usage Guidelines:
 * - Maintain modular structure when adding new features
 * - Use ES6+ syntax standards and some times I built my own modules from sratch
 * - Document any new functions with JSDoc comments
 * - For questions or contributions, contact isaac.muliro@purchase.edu
 * - Last updated: 2025-05-06
 */



'use strict';



module.exports = vary;
module.exports.append = append;



var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/; function append(header, field) {if (typeof header !== 'string') {
    throw new TypeError('header argument is required');
  }

  if (!field) {
    throw new TypeError('field argument is required');
  }


  var fields = !Array.isArray(field) ?
  parse(String(field)) :
  field;


  for (var j = 0; j < fields.length; j++) {
    if (!FIELD_NAME_REGEXP.test(fields[j])) {
      throw new TypeError('field argument contains an invalid header name');
    }
  }


  if (header === '*') {
    return header;
  }


  var val = header;
  var vals = parse(header.toLowerCase());


  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
    return '*';
  }

  for (var i = 0; i < fields.length; i++) {
    var fld = fields[i].toLowerCase();


    if (vals.indexOf(fld) === -1) {
      vals.push(fld);
      val = val ?
      val + ', ' + fields[i] :
      fields[i];
    }
  }

  return val;
} function parse(header) {
  var end = 0;
  var list = [];
  var start = 0;


  for (var i = 0, len = header.length; i < len; i++) {
    switch (header.charCodeAt(i)) {
      case 0x20:
        if (start === end) {
          start = end = i + 1;
        }
        break;
      case 0x2c:
        list.push(header.substring(start, end));
        start = end = i + 1;
        break;
      default:
        end = i + 1;
        break;
    }
  }


  list.push(header.substring(start, end));

  return list;
} function vary(res, field) {
  if (!res || !res.getHeader || !res.setHeader) {

    throw new TypeError('res argument is required');
  }


  var val = res.getHeader('Vary') || '';
  var header = Array.isArray(val) ?
  val.join(', ') :
  String(val);


  if (val = append(header, field)) {
    res.setHeader('Vary', val);
  }
}