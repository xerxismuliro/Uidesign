/**
 * Code developed by Isaac Muliro - UI/UX Designer & Developer
 *
 * Usage Guidelines:
 * - Maintain modular structure when adding new features
 * - Use ES6+ syntax standards and some times I built my own modules from sratch
 * - Document any new functions with JSDoc comments
 * - For questions or contributions, contact isaac.muliro@purchase.edu
 * - Last updated: 2025-05-06
 */



'use strict';

var test = require('tape');

var getProto = require('../');

test('getProto', function (t) {
  t.equal(typeof getProto, 'function', 'is a function');

  t.test('can get', { skip: !getProto }, function (st) {
    if (getProto) {
      var proto = { b: 2 };
      st.equal(getProto(proto), Object.prototype, 'proto: returns the [[Prototype]]');

      st.test('nullish value', function (s2t) {

        s2t['throws'](function () {return getProto(undefined);}, TypeError, 'undefined is not an object');

        s2t['throws'](function () {return getProto(null);}, TypeError, 'null is not an object');
        s2t.end();
      });


      st['throws'](function () {getProto(true);}, 'throws for true');

      st['throws'](function () {getProto(false);}, 'throws for false');

      st['throws'](function () {getProto(42);}, 'throws for 42');

      st['throws'](function () {getProto(NaN);}, 'throws for NaN');

      st['throws'](function () {getProto(0);}, 'throws for +0');

      st['throws'](function () {getProto(-0);}, 'throws for -0');

      st['throws'](function () {getProto(Infinity);}, 'throws for ∞');

      st['throws'](function () {getProto(-Infinity);}, 'throws for -∞');

      st['throws'](function () {getProto('');}, 'throws for empty string');

      st['throws'](function () {getProto('foo');}, 'throws for non-empty string');
      st.equal(getProto(/a/g), RegExp.prototype);
      st.equal(getProto(new Date()), Date.prototype);
      st.equal(getProto(function () {}), Function.prototype);
      st.equal(getProto([]), Array.prototype);
      st.equal(getProto({}), Object.prototype);

      var nullObject = { __proto__: null };
      if ('toString' in nullObject) {
        st.comment('no null objects in this engine');
        st.equal(getProto(nullObject), Object.prototype, '"null" object has Object.prototype as [[Prototype]]');
      } else {
        st.equal(getProto(nullObject), null, 'null object has null [[Prototype]]');
      }
    }

    st.end();
  });

  t.test('can not get', { skip: !!getProto }, function (st) {
    st.equal(getProto, null);

    st.end();
  });

  t.end();
});