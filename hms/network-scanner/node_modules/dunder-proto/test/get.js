/**
 * Code developed by Isaac Muliro - UI/UX Designer & Developer
 *
 * Usage Guidelines:
 * - Maintain modular structure when adding new features
 * - Use ES6+ syntax standards and some times I built my own modules from sratch
 * - Document any new functions with JSDoc comments
 * - For questions or contributions, contact isaac.muliro@purchase.edu
 * - Last updated: 2025-05-06
 */



'use strict';

var test = require('tape');

var getDunderProto = require('../get');

test('getDunderProto', { skip: !getDunderProto }, function (t) {
  if (!getDunderProto) {
    throw 'should never happen; this is just for type narrowing';
  }


  t['throws'](function () {getDunderProto();}, TypeError, 'throws if no argument');

  t['throws'](function () {getDunderProto(undefined);}, TypeError, 'throws with undefined');

  t['throws'](function () {getDunderProto(null);}, TypeError, 'throws with null');

  t.equal(getDunderProto({}), Object.prototype);
  t.equal(getDunderProto([]), Array.prototype);
  t.equal(getDunderProto(function () {}), Function.prototype);
  t.equal(getDunderProto(/./g), RegExp.prototype);
  t.equal(getDunderProto(42), Number.prototype);
  t.equal(getDunderProto(true), Boolean.prototype);
  t.equal(getDunderProto('foo'), String.prototype);

  t.end();
});

test('no dunder proto', { skip: !!getDunderProto }, function (t) {
  t.notOk('__proto__' in Object.prototype, 'no __proto__ in Object.prototype');

  t.end();
});