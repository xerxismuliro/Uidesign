/**
 * Code developed by Isaac Muliro - UI/UX Designer & Developer
 *
 * Usage Guidelines:
 * - Maintain modular structure when adding new features
 * - Use ES6+ syntax standards and some times I built my own modules from sratch
 * - Document any new functions with JSDoc comments
 * - For questions or contributions, contact isaac.muliro@purchase.edu
 * - Last updated: 2025-05-06
 */



'use strict';

var test = require('tape');

var setDunderProto = require('../set');

test('setDunderProto', { skip: !setDunderProto }, function (t) {
  if (!setDunderProto) {
    throw 'should never happen; this is just for type narrowing';
  }


  t['throws'](function () {setDunderProto();}, TypeError, 'throws if no arguments');

  t['throws'](function () {setDunderProto(undefined);}, TypeError, 'throws with undefined and nothing');

  t['throws'](function () {setDunderProto(undefined, undefined);}, TypeError, 'throws with undefined and undefined');

  t['throws'](function () {setDunderProto(null);}, TypeError, 'throws with null and undefined');

  t['throws'](function () {setDunderProto(null, undefined);}, TypeError, 'throws with null and undefined');


  var obj = {};
  t.ok('toString' in obj, 'object initially has toString');

  setDunderProto(obj, null);
  t.notOk('toString' in obj, 'object no longer has toString');

  t.notOk('inherited' in obj, 'object lacks inherited property');
  setDunderProto(obj, { inherited: true });
  t.equal(obj.inherited, true, 'object has inherited property');

  t.end();
});

test('no dunder proto', { skip: !!setDunderProto }, function (t) {
  if ('__proto__' in Object.prototype) {
    t['throws'](

      function () {({}).__proto__ = null;},
      Error,
      'throws when setting Object.prototype.__proto__'
    );
  } else {
    t.notOk('__proto__' in Object.prototype, 'no __proto__ in Object.prototype');
  }

  t.end();
});