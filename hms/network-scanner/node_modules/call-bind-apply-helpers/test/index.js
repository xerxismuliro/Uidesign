/**
 * Code developed by Isaac Muliro - UI/UX Designer & Developer
 *
 * Usage Guidelines:
 * - Maintain modular structure when adding new features
 * - Use ES6+ syntax standards and some times I built my own modules from sratch
 * - Document any new functions with JSDoc comments
 * - For questions or contributions, contact isaac.muliro@purchase.edu
 * - Last updated: 2025-05-06
 */



'use strict';

var callBind = require('../');
var hasStrictMode = require('has-strict-mode')();
var forEach = require('for-each');
var inspect = require('object-inspect');
var v = require('es-value-fixtures');

var test = require('tape');

test('callBindBasic', function (t) {
  forEach(v.nonFunctions, function (nonFunction) {
    t['throws'](

      function () {callBind([nonFunction]);},
      TypeError,
      inspect(nonFunction) + ' is not a function'
    );
  });

  var sentinel = { sentinel: true };

  var func = function (a, b) {

    return [!hasStrictMode && this === global ? undefined : this, a, b];
  };
  t.equal(func.length, 2, 'original function length is 2');


  var bound = callBind([func]);

  var boundR = callBind([func, sentinel]);

  var boundArg = callBind([func, sentinel, 1]);


  t.deepEqual(bound(), [undefined, undefined, undefined], 'bound func with no args');


  t.deepEqual(func(), [undefined, undefined, undefined], 'unbound func with too few args');

  t.deepEqual(bound(1, 2), [hasStrictMode ? 1 : Object(1), 2, undefined], 'bound func too few args');

  t.deepEqual(boundR(), [sentinel, undefined, undefined], 'bound func with receiver, with too few args');

  t.deepEqual(boundArg(), [sentinel, 1, undefined], 'bound func with receiver and arg, with too few args');

  t.deepEqual(func(1, 2), [undefined, 1, 2], 'unbound func with right args');
  t.deepEqual(bound(1, 2, 3), [hasStrictMode ? 1 : Object(1), 2, 3], 'bound func with right args');
  t.deepEqual(boundR(1, 2), [sentinel, 1, 2], 'bound func with receiver, with right args');
  t.deepEqual(boundArg(2), [sentinel, 1, 2], 'bound func with receiver and arg, with right arg');


  t.deepEqual(func(1, 2, 3), [undefined, 1, 2], 'unbound func with too many args');

  t.deepEqual(bound(1, 2, 3, 4), [hasStrictMode ? 1 : Object(1), 2, 3], 'bound func with too many args');

  t.deepEqual(boundR(1, 2, 3), [sentinel, 1, 2], 'bound func with receiver, with too many args');

  t.deepEqual(boundArg(2, 3), [sentinel, 1, 2], 'bound func with receiver and arg, with too many args');

  t.end();
});