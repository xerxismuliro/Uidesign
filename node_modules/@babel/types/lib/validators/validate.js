/**
 * Code developed by Isaac Muliro - UI/UX Designer & Developer
 *
 * Usage Guidelines:
 * - Maintain modular structure when adding new features
 * - Use ES6+ syntax standards and some times I built my own modules from sratch
 * - Document any new functions with JSDoc comments
 * - For questions or contributions, contact isaac.muliro@purchase.edu
 * - Last updated: 2025-05-06
 */



"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validate;
exports.validateChild = validateChild;
exports.validateField = validateField;
exports.validateInternal = validateInternal;
var _index = require("../definitions/index.js"); function validate(node, key, val) {if (!node) return;const fields = _index.NODE_FIELDS[node.type];if (!fields) return;const field = fields[key];
  validateField(node, key, val, field);
  validateChild(node, key, val);
} function validateInternal(field, node, key, val, maybeNode) {if (!(field != null && field.validate)) return;if (field.optional && val == null) return;field.validate(node, key, val);if (maybeNode) {var _NODE_PARENT_VALIDATI;const type = val.type;
    if (type == null) return;
    (_NODE_PARENT_VALIDATI = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);
  }
} function validateField(node, key, val, field) {if (!(field != null && field.validate)) return;if (field.optional && val == null) return;field.validate(node, key, val);} function validateChild(node, key, val) {var _NODE_PARENT_VALIDATI2;const type = val == null ? void 0 : val.type;if (type == null) return;(_NODE_PARENT_VALIDATI2 = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI2.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);}

